---
- name: database
  hosts: db
  remote_user: root
  become: yes
  roles:
    - role: ANXS.postgresql
      vars:
        postgresql_version: 11
        postgresql_listen_addresses: "*"
        postgresql_default_auth_method: "trust"
        postgresql_databases:
          - name: movies
        postgresql_pg_hba_custom:
          - {
              type: "host",
              database: "all",
              user: "all",
              address: "0.0.0.0/0",
              method: "trust",
            }

- name: frontend
  hosts: frontend
  become: yes

  tasks:
    - name: Install Apache
      apt: name=apache2 update_cache=yes state=latest

    - name: Remove old website files
      command: rm -rf /tmp/website

    - name: Remove old website files (apache)
      command: rm -rf /var/www/html

    - name: Copy website directories
      copy:
        src: ../frontend/public
        dest: /tmp/website
        local_follow: False

    - name: Creating symlinks of webpage
      file:
        src: /tmp/website/public
        dest: /var/www/html
        state: link

- name: backend
  hosts: backend
  become: yes

  vars:
    node_version: 15.14.0
    project_path: /tmp/backend

  tasks:
    - name: Install dependencies for nvm
      apt:
        pkg:
          - git
          - curl

    - name: "Install nvm"
      shell: >
        curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
      args:
        executable: /bin/bash
        chdir: "{{ ansible_env.HOME }}"
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

    - name: "Install node"
      shell: >
        . {{ ansible_env.HOME }}/.nvm/nvm.sh && nvm install {{ node_version }} && nvm run {{node_version}} --version && nvm alias default {{node_version}}
      args:
        executable: /bin/bash
        chdir: "{{ ansible_env.HOME }}"
        creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}"
      loop:
        - node

    - name: Remove old files
      command: "rm -rf {{ project_path }}"

    - name: Copy files
      copy:
        src: ../backend
        dest: /tmp
        local_follow: False

    - name: Install node_modules
      npm:
        path: "{{ project_path }}"
        ci: yes
        executable: "{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin/npm"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin"

    - name: Run prisma generate
      command: "npx prisma generate"
      args:
        chdir: "{{ project_path }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin"

    - name: Run prisma migrate
      command: "npx prisma migrate reset --force --preview-feature"
      args:
        chdir: "{{ project_path }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin"

    - name: "Install forever"
      npm: name=forever global=yes state=present
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin"

    - name: Get app process id
      shell: "ps aux | grep node | grep -v grep | awk '{print $2}'"
      register: process_id

    - name: Stop app process
      shell: kill -9 {{ item }}
      with_items: process_id.stdout_lines
      ignore_errors: True # Ignore error when no process running

    - name: Start application
      command: forever start "{{ project_path }}/src/index.js"
      environment:
        NODE_ENV: production
        PATH: "{{ ansible_env.PATH }}:{{ ansible_env.HOME }}/.nvm/versions/node/v{{ node_version }}/bin"
      args:
        chdir: "{{ project_path }}"
